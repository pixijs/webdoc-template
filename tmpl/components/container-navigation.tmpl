<?js
var self = this;
var canStyleAsNamespace = function(item) {
    return item.type === 'namespace' || item.type === 'module';
};
?>
<div class="navigation">
    <h3 class="applicationName"><a href="index.html"><?js= Webdoc.env.conf.templates.applicationName ?></a></h3>
    <button id="menuToggle" class="btn btn-link btn-lg menu-toggle">
        <span class="glyphicon glyphicon-menu-hamburger"></span>
    </button>
    <div class="search">
        <input id="search" type="text" class="form-control input-md" placeholder="Search..." autocomplete="off">
    </div>
    <ul class="list">
    <?js
    const process = (item) => {
        const isNamespace = canStyleAsNamespace(item);
        const isNamespaceItem = item.path.includes(".");
    ?>
        <li class="item <?js= isNamespaceItem ? 'namespaceItem' : ''?>" data-name="<?js= (item.type === 'tutorial' ? 'tutorial-' : '') + item.path ?>">
            <span class="title <?js if (isNamespace) { ?>namespace<?js } ?> <?js if (item.deprecated) { ?>status-deprecated<?js } ?>">
                <?js if (isNamespace) { ?>
                <span class="namespaceTag">
                    <span class="glyphicon glyphicon-<?js= (item.path === 'global') ? 'globe' : 'folder-open' ?>"></span>
                </span>
                <?js } ?>
                <?js if (item.type === 'module') { ?>
                    <?js= this.linkTo(item.path, item.name) ?>
                <?js } else if (item.type === 'tutorial') { ?>
                    <span class="namespaceTag"><span class="glyphicon glyphicon-education"></span></span>
                    <?js= self.tutoriallink(item.path) ?>
                <?js } else { ?>
                    <?js= this.linkTo(item.path, item.path === 'global' ? 'Global' : item.name) ?>
                <?js } ?>
            </span>

            <?js
            if (item.classes) {
            ?>
            <ul class="classes itemMembers">
            <?js
            if (item.classes.length) {
            ?>
            <span class="subtitle">Classes</span>
            <?js
                item.classes.forEach(function (v) {
            ?>
                <li class="parent" data-name="<?js= v.path ?>"><?js= self.linkTo(v.path, v.name) ?></li>
            <?js
                });
            }}
            ?>
            </ul>

            <?js
            if (item.members) {
            ?>
            <ul class="members itemMembers">
            <?js
            if (item.members.length) {
            ?>
            <span class="subtitle">Members</span>
            <?js
                item.members.forEach(function (v) {
            ?>
                <li class="<?js if (!v.inherited && !v.inherits) { ?>parent<?js } ?> <?js if (v.deprecated) { ?>status-deprecated<?js } ?>" data-name="<?js= v.path ?>"><?js= self.linkTo(v.path, v.name) ?></li>
            <?js
                });
            }
            ?>
            </ul>

            <ul class="enums itemMembers">
                <?js if (item.enums.length) { ?>
                  <span class="subtitle">Enums</span>

                  <?js item.enums.forEach((enumDoc) => { ?>
                      <li class="parent" data-name="<?js= enumDoc.path ?>">
                          <?js= self.linkTo(enumDoc.path, enumDoc.name) ?>
                      </li>
                  <?js });
                } ?>
            </ul>

            <?js
            }
            if (item.typedefs) {
            ?>
            <ul class="typedefs itemMembers">
            <?js
            if (item.typedefs.length) {
            ?>
            <span class="subtitle">Typedefs</span>
            <?js
                item.typedefs.forEach(function (v) {
            ?>
                <li class="parent" data-name="<?js= v.path ?>"><?js= self.linkTo(v.path, v.name) ?></li>
            <?js
                });
            }
            ?>
            </ul>
            <?js
            }
            if (item.interfaces) {
            ?>
            <ul class="typedefs itemMembers">
            <?js
            if (item.interfaces.length) {
            ?>
            <span class="subtitle">Interfaces</span>
            <?js
                item.interfaces.forEach(function (v) {
            ?>
                <li class="parent" data-name="<?js= v.path ?>"><?js= self.linkTo(v.path, v.name) ?></li>
            <?js
                });
            }
            ?>
            </ul>
            <?js
            }
            if (item.methods) {
            ?>
            <ul class="methods itemMembers">
            <?js
            if (item.methods.length) {
            ?>
            <span class="subtitle">Methods</span>
            <?js

                item.methods.forEach(function (v) {
            ?>
                <li class="<?js if (!v.inherited && !v.inherits) { ?>parent<?js } ?>  <?js if (v.deprecated) { ?>status-deprecated<?js } ?>" data-name="<?js= v.path ?>"><?js= self.linkTo(v.path, v.name) ?></li>
            <?js
                });
            }
            ?>
            </ul>
            <?js
            }
            if (item.events) {
            ?>
            <ul class="events itemMembers">
            <?js
            if (item.events.length) {
            ?>
            <span class="subtitle">Events</span>
            <?js
                item.events.forEach(function (v) {
            ?>
                <li class="<?js if (!v.inherited && !v.inherits) { ?>parent<?js } ?>" data-name="<?js= v.path ?>"><?js= self.linkTo(v.path, v.name) ?></li>
            <?js
                });
            }
            ?>
            </ul>
            <?js
            }
            if (item.children) {
            ?>
            <ul class="children itemMembers">
            <?js
            if (item.children.length) {
            ?>
            <span class="subtitle"></span>
            <?js
                item.children.forEach(function (v) {
                    process(v);
                });
            }
            ?>
            </ul>
            <?js
            }
            ?>
        </li>
    <?js }; ?>
    <?js
    this.nav.forEach(process);
    ?>
    </ul>
</div>
