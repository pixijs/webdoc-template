<?js
    var self = this;

    const LAYOUT_COLLAPSIBLE_GROUP = 'sublayouts' + String.fromCharCode(47) + 'collapsible-group.tmpl';

    docs.forEach((doc, i) => {
      if (!doc) {
        return;// happens!
      }
?>
<?js if (doc.type === 'mainPage' || doc.type === 'PackageDoc') { ?>
    <?js= this.partial('components/main-page.tmpl', doc) ?>
<?js } else if (doc.type === 'sourceFile') { ?>
    <?js= this.partial('source.tmpl', doc) ?>
<?js } else {

        const currentDoc = doc;
        const memberList = currentDoc.members;
        const properties = this.getProperties(doc);
        const methods = this.getMethodLikes(doc);
        const events = this.getEvents(doc);

        let ancestorClasses
        const hasInheritedProperties = doc.extends && properties.find(prop => prop.inherits);
        const hasInheritedMethods = doc.extends && methods.find(method => method.inherits);
        const hasInheritedEvents = doc.extends && events.find(event => event.inherits);

        if (hasInheritedProperties || hasInheritedMethods || hasInheritedEvents) {
          ancestorClasses = this.plugins.relations.getAncestorClasses(currentDoc);
        }
?>

<section>

<header>
  <div class="header content-size">
      <h2>
        <?js=(doc.name || title) ?>

        <?js if (doc.variation) { ?>
            <sup class="variation"><?js= doc.variation ?></sup>
        <?js } ?>
      </h2>

      <?js if (doc.brief) { ?>
          <div class="class-description"><?js= doc.brief ?></div>
      <?js } ?>
      <?js if (doc.description) { ?>
          <div class="class-description"><?js= doc.description ?></div>
      <?js } ?>
  </div>
</header>

<article class="content-size">
    <div class="container-overview">
        <?js if (doc.type === "ClassDoc") {
            const ctor = this.getConstructor(doc);

            if (ctor) { ?>
              <?js= this.partial('method.tmpl', ctor) ?>
            <?js } ?>
        <?js } else if (doc.type === "NSDoc" && doc.signature ) { ?>
            <?js= this.partial('method.tmpl', doc) ?>
        <?js }?>

        <?js= this.partial('details.tmpl', doc) ?>

        <?js if (doc.examples && doc.examples.length) { ?>
            <h3>Example<?js= doc.examples.length > 1? 's':'' ?></h3>
            <?js= self.partial('examples.tmpl', doc.examples) ?>
        <?js } ?>
    </div>

    <?js if (doc.extends && doc.extends.length) { ?>
        <h3 class="subsection-title">Extends</h3>

        <ul>
          <?js doc.extends.forEach(function(doc) { ?>
            <li><?js= self.linkTo(typeof doc === "string"? doc : doc.path, doc.name) ?></li>
          <?js }); ?>
        </ul>
    <?js } ?>

    <?js if (doc.implements && doc.implements.length) { ?>
        <h3 class="subsection-title">Implements</h3>

        <ul>
          <?js doc.implements.forEach(function(doc) { ?>
            <li><?js= self.linkTo(typeof doc === "string" ? doc : doc.path, doc.name) ?></li>
          <?js }); ?>
        </ul>
    <?js } ?>

    <?js if (doc.mixes && doc.mixes.length) { ?>
        <h3 class="subsection-title">Mixes In</h3>

        <ul>
          <?js doc.mixes.forEach(function(doc) { ?>
            <li><?js= self.linkTo(typeof doc === "string" ? doc : doc.path, doc.name) ?></li>
          <?js }); ?>
        </ul>
    <?js } ?>

    <?js if (doc.requires && doc.requires.length) { ?>
        <h3 class="subsection-title">Requires</h3>

        <ul><?js doc.requires.forEach(function(r) { ?>
            <li><?js= self.linkto(r, r) ?></li>
        <?js }); ?></ul>
    <?js } ?>

    <?js
        const classes = this.getClasses(doc);

        if (classes && classes.length) {
    ?>
        <h3 class="subsection-title">Classes</h3>

        <dl class="clearfix summary-list list-classes"><?js classes.forEach(function(c) { ?>
            <dt class="<?js= c.deprecated ? 'status-deprecated' : ''?>"><?js= self.linkto(c.path, c.name) ?></dt>
            <?js if (c.summary) { ?><dd><?js= c.summary ?></dd><?js } ?>
        <?js }); ?></dl>
    <?js } ?>

    <?js
        var interfaces = this.getInterfaces(doc);

        if (interfaces && interfaces.length && interfaces.forEach) {
    ?>
        <h3 class="subsection-title">Interface Definitions</h3>

        <dl class="list-interfaces"><?js interfaces.forEach(function(e) {
                if (e.signature) {
            ?>
                <?js= self.partial('method.tmpl', e) ?>
            <?js
                }
                else {
            ?>
                <?js= self.partial('members.tmpl', e) ?>
            <?js
                }
            }); ?></dl>
    <?js } ?>

    <?js
        const mixins = this.getMixins(doc);

        if (mixins && mixins.length) {
    ?>
        <h3 class="subsection-title">Mixins</h3>

        <dl><?js mixins.forEach(function(m) { ?>
            <dt><?js= self.linkto(m.path, m.name) ?></dt>
            <dd><?js if (m.summary) { ?><?js= m.summary ?><?js } ?></dd>
        <?js }); ?></dl>
    <?js } ?>

    <?js
        const namespaces = this.getNamespaces(doc);

        if (namespaces && namespaces.length) {
    ?>
        <h3 class="subsection-title">Namespaces</h3>

        <dl class="clearfix summary-list list-namespaces"><?js namespaces.forEach(function(n) { ?>
            <dt class="<?js= n.deprecated ? 'status-deprecated' : ''?>"><?js= self.linkto(n.path, n.name) ?></dt>

            <?js if (n.summary) { ?><dd><?js= n.summary ?></dd><?js } ?>
        <?js }); ?></dl>
    <?js } ?>

    <?js
        let members = hasInheritedProperties ? properties.filter(prop => !prop.inherited) : properties;

        // symbols that are assigned to module.exports are not globals, even though they're not a memberof anything
        if (members && members.length && members.forEach) {
            members = members.filter(function(m) {
                return m.path && m.path.indexOf('module:') !== 0;
            });
        }
        if (members && members.length) {
    ?>
        <h3 class="subsection-title">Members</h3>

        <?js members.forEach(function(p) { ?>
            <?js= self.partial('members.tmpl', p) ?>
        <?js }); ?>
    <?js } ?>

    <?js
        const enums = this.getEnums(currentDoc);

        if (enums.length) {
    ?>
        <h3 class="subsection-title">Enums</h3>

        <?js enums.forEach((enumDoc) => { ?>
            <?js= self.partial("doc/enum.tmpl", enumDoc) ?>
        <?js }); ?>
    <?js } ?>

    <?js
        const typedefs = this.getTypedefs(doc);

        if (typedefs.length) {
    ?>
        <h3 class="subsection-title">Type Definitions</h3>

        <?js typedefs.forEach(function(e) {
                if (e.params) {
            ?>
                <?js= self.partial('method.tmpl', e) ?>
            <?js
                }
                else {
            ?>
                <?js= self.partial('members.tmpl', e) ?>
            <?js
                }
            }); ?>
    <?js } ?>

    <?js
        // Methods that are not inherited
        const _methods = hasInheritedMethods ? methods.filter(method => !method.inherited) : methods;

        if (_methods && _methods.length) {
    ?>
        <h3 class="subsection-title">Methods</h3>

        <?js _methods.forEach(function(m) { ?>
            <?js= self.partial('method.tmpl', m) ?>
        <?js }); ?>
    <?js } ?>

    <?js
        // Events that are not inherited
        const _events = hasInheritedEvents ? events.filter(event => !event.inherited) : events;

        if (_events && _events.length) {
    ?>
        <h3 class="subsection-title">Events</h3>

        <?js _events.forEach(function(e) { ?>
            <?js= self.partial('method.tmpl', e) ?>
        <?js }); ?>
    <?js } ?>

    <?js if (hasInheritedProperties) { ?>
        <?js= this.partial('class-hierarchy/inherited-properties.tmpl', { ancestorClasses, properties }) ?>
    <?js } ?>

    <?js if (hasInheritedMethods) { ?>
        <?js= this.partial('class-hierarchy/inherited-methods.tmpl', { ancestorClasses, methods }) ?>
    <?js } ?>

    <?js if (hasInheritedEvents) { ?>
        <?js= this.partial('class-hierarchy/inherited-events.tmpl', { ancestorClasses, events }) ?>
    <?js } ?>
</article>

</section>
<?js } ?>

<?js }); ?>
